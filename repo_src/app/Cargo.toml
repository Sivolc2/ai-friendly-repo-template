[package]
name = "app"
version = "0.1.0"
edition = "2021"

[lib]
crate-type = ["cdylib", "rlib"]

[dependencies]
leptos = { version = "0.6", features = ["csr", "serde"] } # Remove nightly feature for stable compatibility
leptos_meta = { version = "0.6", features = ["csr"] }
leptos_axum = { version = "0.6", optional = true }
leptos_router = { version = "0.6", features = ["csr"] }

# Serde for serialization (needed for server functions)
serde = { version = "1.0", features = ["derive"] }

# Logging
log = "0.4"

# Shared types
shared = { path = "../shared" }

# Server-side (SSR) specific dependencies
axum = { version = "0.7", optional = true }
tokio = { version = "1", features = ["rt-multi-thread"], optional = true }
tower = { version = "0.4", optional = true }
tower-http = { version = "0.5", features = ["fs"], optional = true }
sqlx = { version = "0.7", features = ["runtime-tokio", "sqlite", "macros", "chrono", "uuid"], optional = true }
dotenvy = { version = "0.15", optional = true }
thiserror = { version = "1.0", optional = true }
http = { version = "1.0", optional = true } # Ensure http version compatibility
chrono = { version = "0.4", features = ["serde"], optional = true } # For timestamps

# Client-side (CSR/WASM) specific dependencies
console_error_panic_hook = { version = "0.1.7", optional = true }
console_log = { version = "1.0", optional = true }
wasm-bindgen = { version = "0.2.92", optional = true }
web-sys = { version = "0.3", features = ["HtmlInputElement", "KeyboardEvent", "Event"], optional = true }

[features]
hydrate = [
    "leptos/hydrate",
    "leptos_meta/hydrate",
    "leptos_router/hydrate",
    "dep:console_error_panic_hook",
    "dep:console_log",
    "dep:wasm-bindgen",
    "dep:web-sys",
]
ssr = [
    "dep:axum",
    "dep:tokio",
    "dep:tower",
    "dep:tower-http",
    "dep:leptos_axum",
    "dep:sqlx",
    "dep:dotenvy",
    "dep:thiserror",
    "dep:http",
    "dep:chrono",
    "leptos/ssr",
    "leptos_meta/ssr",
    "leptos_router/ssr",
]
# Default feature for development, enables auto-migration
default = ["ssr", "hydrate", "DATABASE_AUTO_MIGRATE"]

# Feature to enable automatic database migrations on server startup
DATABASE_AUTO_MIGRATE = ["dep:sqlx"]


[package.metadata.leptos]
# The name used by wasm-bindgen/cargo-leptos for the JS/WASM bundle. Defaults to the crate name.
output-name = "app"
# The site root folder is where cargo-leptos generate all output. WARNING: all content of this folder will be erased on a rebuild. Use it in your server setup.
site-root = "target/site"
# The site-pkg-dir is where cargo-leptos generate the WASM/JS package used by the JS bundle.
site-pkg-dir = "pkg"
# The style-file is the relative path for the CSS file to use when using --style option found in Leptos.toml
style-file = "style/main.css"
# Assets dir. All files found here will be copied and served as static assets.
assets-dir = "public"
# The IP and port (ex: 127.0.0.1:3000) where the server serves the content. Use it in your server setup.
site-addr = "127.0.0.1:3000"
# The port to use for automatic reload monitoring
reload-port = 3001
# The browserlist query used for optimizing the JS bundle
browserquery = "defaults"
# Set by cargo-leptos watch when building with that tool. Controls whether autoreload JS will be included in the HTML snippet
# watch = false
# The environment Leptos will run in, usually either "DEV" or "PROD"
env = "DEV"
# The features to use when compiling the bin target
#
# Optional. Can be over-ridden with the command line parameter --bin-features
bin-features = ["ssr"]

# If the --separate-front-target-dir command line parameter is
# provided, this is the directory in which the frontend bundle is
# built. Otherwise, it defaults to "<SITE_ROOT>/front"
# front-target-dir = "target/front"

# The features to use when compiling the lib target
#
# Optional. Can be over-ridden with the command line parameter --lib-features
lib-features = ["hydrate"]

# Path to .env file that will be created if it does not exist.
# Path is relative to the directory of this Leptos.toml file.
# Creates an empty .env file if it does not exist.
env-file = "../../.env"
# Path to the Cargo.toml file for the Wassm / client side. It can be the same as the bin-cargo-manifest-path.
lib-cargo-manifest-path = "Cargo.toml"
# Path to the Cargo.toml file for the Server / bin side. It can be the same as the lib-cargo-manifest-path.
bin-cargo-manifest-path = "Cargo.toml"
# Additional arguments to forward to the wasm-bindgen CLI call.
# bin-exe-name = "app" # Keep this commented if your bin name is the same as package name

[dev-dependencies]
tokio = { version = "1", features = ["macros", "rt-multi-thread"] }
wasm-bindgen-test = "0.3.42" 